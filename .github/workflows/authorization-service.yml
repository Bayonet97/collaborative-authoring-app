name: AuthorizationService

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - src/Services/AuthorizationService/**
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - src/Services/AuthorizationService/**

env:
  PROJECT_ID: s64-1-vetis
  GKE_CLUSTER: ca-cluster    # TODO: update to cluster name
  GKE_ZONE: europe-west1-b   # TODO: update to cluster zone
  DEPLOYMENT_NAME: ca-authorization-service # TODO: update to deployment name
  IMAGE: static-site

defaults:
  run:
    working-directory: src

jobs:

  build:
    name: Build
    # To prevent bugs in case latest has breaking changes
    runs-on: ubuntu-20.04
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure Google Auth
    # Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_key: ${{ secrets.GCLOUD_SERVICE_ID }}
        project_id: s64-1-vetis

    # Sets up the .NET SDK
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    
    # Installs the dependencies
    - name: Install dependencies
      run: dotnet restore ./Services/AuthorizationService/API

    # Builds the code
    - name: Build
      run: dotnet build --no-restore ./Services/AuthorizationService/API
  
  test:
    needs: build
    name: Test
    # To prevent bugs in case latest has breaking changes
    runs-on: ubuntu-20.04
    steps:
    # Checks out the code
    - name: Checkout
      uses: actions/checkout@v2

    # Tests the code
    - name: Build
      run: dotnet test ./Services/AuthorizationService/Tests

  semver:
    name: Calculate SemVer version
    # To prevent bugs in case latest has breaking changes
    runs-on: ubuntu-20.04
    outputs:
      SEMVER: ${{ steps.fixsemver.outputs.SEMVER }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Git version
      id: gitversion
      uses: codacy/git-version@2.4.0
      with:
        prefix: CA-authorization-service-

    - name: Fix semver
      id: fixsemver
      run: |
        VERSION=${{ steps.gitversion.outputs.VERSION }}
        FIXED_SEMVER=${VERSION##*CA-authorization-service-}
        echo "::set-output name=SEMVER::${FIXED_SEMVER}"
        echo "${FIXED_SEMVER}"

  docker:
    needs: 
     - test
     - semver
    name: Build and push Docker images
    env:
      SEMVER: ${{ needs.semver.outputs.SEMVER }}
    environment:
      name: docker
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Configure Google Auth
    # Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '270.0.0'
        service_account_key: ${{ secrets.GCLOUD_SERVICE_ID }}
        project_id: s64-1-vetis

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud --quiet auth configure-docker

#    - run: |-
#        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Build and push AuthorizationService Docker image 
      run: |
        echo "Building AuthorizationService docker image"
        docker build -t ${{ secrets.AUTHORIZATION_SERVICE_REGISTRY }}:${{ env.SEMVER }} -t ${{ secrets.AUTHORIZATION_SERVICE_REGISTRY }}:latest -f ./CA-authorization-service.Dockerfile .
        echo "Publishing AuthorizationService docker image"
        docker push --all-tags ${{ secrets.AUTHORIZATION_SERVICE_REGISTRY }}

  production:
    needs: 
    - docker
    - semver
    name: Deploy to Kubernetes
    env:
      SEMVER: ${{ needs.semver.outputs.SEMVER }}
    environment:
      name: docker
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Update manifest tags
        run: |
          sed -i'' -e 's/:latest/:${{ env.SEMVER }}/g' ./../kubernetes/services/authorization-service/ca-authorization-service.kustomization.yaml
    
    # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Configure Google Auth
      # Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_key: ${{ secrets.GCLOUD_SERVICE_ID }}
          project_id: s64-1-vetis

      - run: |-
          gcloud --quiet auth configure-docker
    # Edit image
      - name: Edit Image
        run: |-
          ./../kubernetes/services/authorization-service/ca-authorization-service.kustomization.yaml edit set image ${{ secrets.AUTHORIZATION_SERVICE_REGISTRY }}/IMAGE:TAG=${{ secrets.AUTHORIZATION_SERVICE_REGISTRY }}/$IMAGE:latest
          ./../kubernetes/services/authorization-service/ca-authorization-service.kustomization.yaml . | kubectl apply -f -

      - name: Configure Google Auth
      # Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '270.0.0'
          service_account_key: ${{ secrets.GCLOUD_DEPLOY_SERVICE_KEY }}
          project_id: s64-1-vetis

      - id: get-credentials
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: ca-cluster
          location: europe-west1-b
          credentials: ${{ secrets.GCLOUD_DEPLOY_SERVICE_KEY }}

      - run: |-
          gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
      